注释comment:
单行注释： #
多行注释： =pod  (Plain Old Documentations)
          codes to comment
          =cut 

数据类型：
1. scalar：以$开始，以字母或 _ 开头，接下来可以是字母或数字
2. array: 数组，列表， 以@开头
3. hash: 哈希，散列，以%开头
4. file handle: 文件句柄，通常用大写字母来表明句柄类型
5. pointer: 指针，变量前加反斜杠，如 $pointerto=\$var13
**case-sensitive

标量变量
A. 整型
    十进制：decimal：$var0 = 12345;
    八进制：octal： $var1 = 047;
		               #以0开头, 等于十进制的39
    二进制：binary：$val3 =0b11111111;
                   #以0b开头, 等于十进制的255
    十六进制：hexadecimal：$var2 = 0x1f; 
                   #以0x开头, 等于十进制的31
  进制转换：
  #16 to 10
  $int = OxDEADBEEF;
  printf("%d\n, $int);
  $int = hex("DEADBEEF);
  printf("%d\n", $int);
  
  #10 to 16
  $int = 3735928559;
  printf("%X\n", $int);   #大写
  
  #8 to 10
  $int = 033653337357;
  printf("%d\n", $int);
  $int = oct("33653337357");
  printf("%d\n",$int)
  
  #10 to 8
  $int = 3735928559;
  printf"%o\n", $int);
  
  OUTPUT:
  3735928559
  3735928559
  DEADBEEF
  3735928559
  3735928559
  33653337357
  
B. 浮点型
  $val0 = 11.4;
    	$var1 = -0.3; 
    	$val2 =.3;
    	$val3 = 54.1e+02;

    注意：浮点寄存器通常不能精确地存储浮点数，在运算中可能会出现误差。

	#!/usr/local/bin/perl
  	$value = 9.01e+21 + 0.01 - 9.01e+21;
  	print ("The first value is ", $value, "\n");
  	$value = 9.01e+21 - 9.01e+21 + 0.01;
  	print ("The second value is ", $value, "\n");

  OUTPUT:
  The first value is 0
  The second value is 0.01
  
C.字符串
  字符串通常是由可打印的字母﹑数字及标点符号组成，其范围介于ASCII编码的32到126之间。与C语言不同，字符串的
  末尾并不含有隐含的NULL字符。

  单引号字符串：
  $str1=‘’;
  $str2=‘fred_123’;
  $str3=‘hello, world\n’; # \n不是换行符，而表示字面意思

  双引号字符串：
  $str1=“fred_123”;
  $str2=“hello, world\n”; # \n是换行符
  $str3=“coke\tsprite”; # coke, a tab(一个制表符), sprite  

  双引号支持简单变量替换：
  $number = 11;
  $text = "This text contains the number $number.";
  则$text的内容为："This text contains the number 11."

  数字与字符串之间的转换
   	  视操作符而定，Perl会自动完成转换。如表达式中使用字符串操作符，则将数字转换成字符串；
      如表达式中使用数字操作符，所有字符串转换成数字，但是字符串中的非数字部分会被忽略。

  	  “hello, ”.12345 　 #其结果为hello, 12345
   	  “12”*“3” 　　　　 #其结果为36
	    “12fred34”*“3” 　  #其结果仍为36
      “Z”.5*7 　　　　   #等同于“Z”.35, 得到“Z35”
      
      字符串常用函数：
      1. index函数
	        position = index (string, substring, position) 
	        返回子串substring在字符串string中的位置，如果不存在则返回-1。参数position是可选项，表示匹配从该位置开始匹配。
	        $string = 'perlmeme.org';
	        $char1 = 'l';
	        $result = index($string, $char1);
	        print "Result: $result\n";

	        $char2 = 'm';
	        $result = index($string, $char2, 5);
	        print "Result: $result\n";

	        $char3 = 'L';
	        $result = index($string, $char3);
	        print "Result: $result\n"; 
	output:
		Result:3
		Result:6
		Result:-1
	2. rindex函数
		position = rindex (string, substring, position); 
		与index类似，区别是从右端匹配。<index is still counted from left>
		$string = "I can learn much form perlcn.com";
		$loc = index($string,"perlcn");
		print "$loc\n";
		$loc = rindex($string,"perlcn");
		print "$loc\n"; 
	output:
		22
		22
	3.length函数
		num=length(string); 
		返回字符串长度，或者说含有字符的数目。
		$string=“who are you”;  
     		$length=length($string); 
	4.substr函数
		通过substr来存取子串:
		$value = substr($string, $offset, $count);
		$value = substr($string, $offset);
 		通过substr修改子串:
		substr($string, $offset, $count) = $newstring;
		substr($string, $offset) = $newtail; 

		$string = "This is what you have";
		$start = substr($string, 5, 2);
		print $start."\n";
		$remain = substr($string, 5);
		print $remain."\n";
		substr($string, 5, 2) = "wasn't";
		print $string."\n";
		substr($string, 4) = " is a book";
		print $string."\n";
	




     
 
